#!/usr/bin/env python
import sys
from optparse import OptionParser
from textwrap import TextWrapper
from urllib2 import urlopen
from BeautifulSoup import BeautifulSoup

I = ' ' * 4
text_wrap = TextWrapper(initial_indent=I, subsequent_indent=I, fix_sentence_endings=True)
day_fs = '\n%(day)s\n%(text)s'


def to_soup(value):
    return BeautifulSoup(value) if value else None


def zone_info(zone):
    url = 'http://pafc.arh.noaa.gov/rss/rssget.php?zone=%(zone)s'
    return urlopen(url % dict(zone=zone)) if zone else None


def ext_info(attrs):
    url = dict(attrs).get('link')
    return urlopen(url) if url else None


def zone_attrs(item):
    d = item.description.string.split('\n')[2:]
    d = str.join('', d)
    p = 'Today... '
    if d.startswith(p):
        d = d[len(p):]
    d = day_fs % dict(day='Today:', text=d)
    return [
        ('title', item.title.string),
        ('date', item.pubdate.string),
        ('desc', d),
        ('link', item.guid.string)
    ]


def show_attrs(attrs, one=False):
    for i, (k, v) in enumerate(attrs):
        if i == len(attrs)-1 and one:
            text = v.replace('\n', '')
            text = text.lstrip('Today:')
            print
            print '\n'.join(text_wrap.wrap(text))
        else:
            print v


def fix_day(day):
    if day.endswith('...'):
        day = day[0:-3]
    day += ':'
    return day


def show_forecast(element):
    day = element.string.strip()
    day = fix_day(day)
    text = element.nextSibling.strip().replace('\n', ' ')
    text = '\n'.join(text_wrap.wrap(text))
    print day_fs % locals()


def get_options(args=None):
    parser = OptionParser()
    add = parser.add_option
    add('-z', '--zone', dest='zone', default='AKZ101',
        help='NOAA zone identifier.')
    add('-e', '--extended', dest='extended', action='store_true', default=False,
        help='Fetch extended forecast.')
    opts, args = parser.parse_args(sys.argv if args is None else args)
    return opts


if __name__ == '__main__':
    opts = get_options()
    ext = opts.extended
    last = 2 if ext else 3
    soup = to_soup(zone_info(opts.zone))

    for i in soup.findAll('item'):
        attrs = zone_attrs(i)
        show_attrs(attrs[0:last], one=not ext)
        if ext:
            infoex = to_soup(ext_info(attrs))
            for e in infoex.findAll('b', {'class':'fcstdate'}):
                show_forecast(e)
